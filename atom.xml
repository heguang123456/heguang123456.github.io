<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>heguang_blog</title>
  
  <subtitle>heguang_blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-09-27T07:03:45.201Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>heguang123456</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库系统概论</title>
    <link href="http://example.com/2024/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2024/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/</id>
    <published>2024-09-27T06:56:06.000Z</published>
    <updated>2024-09-27T07:03:45.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库系统概念"><a href="#数据库系统概念" class="headerlink" title="数据库系统概念"></a>数据库系统概念</h1><h2 id="数据库基础概念"><a href="#数据库基础概念" class="headerlink" title="数据库基础概念"></a>数据库基础概念</h2><p><strong>数据库管理系统（DataBase-Management System，DMBS）</strong>由一个互相关联的数据的集合和一组用以访问这些数据的程序组成。这个数据集合通常称作<strong>数据库（database）</strong></p><p>概括地说，有两种使用数据库的方式。</p><p>第一种方式是支持<strong>联机事务处理（online transaction processing）</strong>，即大量的用户使用数据库，每个用户检索相对少量的数据，进行小的更新。这是数据库应用系统的绝大多数用户的主要使用方式。</p><p>第二种方式是支持<strong>数据分析（data analytics）</strong>，即审阅数据，给出结论，并推导出规则或决策程序，以用于驱动业务决策。</p><p><strong>数据挖掘（data mining）</strong>领域将人工之恩那个研究者和统计分析员所创造的知识发现技术与使之能够被用于超大规模数据库的高效的实现技术结合起来。</p><p><strong>文件处理系统（file-processing system）</strong>是传统的操作系统所支持的。系统将永久记录存储在多个不同的文件中，需要有不同的应用程序来将记录从有关文件中去除或加入适当的文件中。</p><ul><li><strong>文件处理系统的主要弊端：</strong><ol><li><strong>数据的冗余和不一性（data redundancy and inconsistency）</strong><ol><li>同一份数据存在了不同的地方，如一个老师必然它的数据在教务系统存了一份，在人事系统也存了一份，这样相同的数据存在多个地方，就会<strong>存储浪费，访问麻烦</strong>。而且导致**数据不一致性()**的问题，你修改了某一个文件的信息时，不一定修改了另一个的文件的信息，那么数据就不一致。</li></ol></li><li><strong>数据访问困难（difficulty in accessing data）</strong><ol><li>需要找出满足特定范围或特定需求的数据时，缺少这样的一个列表的程序，不支持以一种方便而高效的方式去获取所需数据，需要开发通用的、反应更加敏捷的数据检索系统。</li></ol></li><li><strong>数据孤立（data isolation）</strong><ol><li>由于数据分散在不同文件中，这些文件又可能具有不同的格式，因此编写新的应用程序来检索适当数据很困难</li></ol></li><li><strong>完整性问题（integrity problem）</strong><ol><li>数据库中所存储数据的值必须满足某些特定类型的<strong>一致性约束（consisteny constraint）</strong>。在不同程序受到不同约束的数据，难以进行统一维护</li></ol></li><li><strong>原子性问题（atomicity problem）</strong><ol><li>要么全部发生，要么根本不发生。</li></ol></li><li><strong>并发访问异常（concurrent-access anomaly）</strong><ol><li>同时10个人抢一张票，那么只能允许一个人搞到票，也就是并发访问控制。而票这个数据，同时被10个客户端修改成功，那么就出问题了。</li></ol></li><li><strong>安全性问题（security problem）</strong><ol><li>并非数据库系统的每一个用户都可以访问所有数据。</li></ol></li></ol></li></ul><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a><strong>数据模型</strong></h3><ol><li><strong>关系模型（relational model）</strong><ol><li>关系模型用表的集合来表示数据和数据间的联系。表也称作关系。</li></ol></li><li><strong>实体-联系模型（entity-structured data model ）</strong><ol><li>实体-联系（E-R）数据模型使用称作实体的基本对象的集合，以及这些对象间的联系</li></ol></li><li><strong>半结构化模型（semi-structured data model）</strong><ol><li>半结构化数据模型允许在其数据定义中某些相同类型的数据项含有不同的属性集。</li></ol></li><li><strong>基于对象的数据模型（object-bsed data model）</strong><ol><li>过程可以被存放在数据库系统中，并由数据库系统来执行它们，这可以看成对关系模型进行扩展，增加了封装、方法和对象标识等。</li></ol></li></ol><p><strong>数据抽象：对用户屏蔽复杂性，以简化用户与系统的交互</strong></p><ul><li><strong>物理层（physical level）：</strong>最低层次的抽象，描述数据实际上是怎样存储的。物理层描述复杂的底层数据结构</li><li><strong>逻辑层（logical level）：比物理层次稍高的抽象，描述数据库中存储什么数据以及这些数据库间存在什么联系。虽然逻辑层的简单结构的实现可能设计复杂的物理层结构，但逻辑层的用户不必意识到这样的复杂性，</strong></li><li><strong>视图层（view level）：最高层次的抽象，它只描述整个数据的某些部分。视图层抽象的存在正是为了使这些用户与系统的交互更简，系统为同一数据库提供多个视图。</strong></li></ul><h3 id="实例和模型"><a href="#实例和模型" class="headerlink" title="实例和模型"></a><strong>实例和模型</strong></h3><p>特定时刻存储在数据库中的信息的集合称作数据库的一个<strong>实例（instance），</strong>而数据库的总体设计称作数据库<strong>模式（schema）。</strong></p><p>按不同的抽象层次划分，数据库系统有几种模式。<strong>物理模式（physical schema）</strong>在物理层描述数据库的设计 ，而<strong>逻辑模式（logical schema）</strong>则在逻辑层描述数据库的设计。数据库在视图层也可以有几种模式，有时称为<strong>子模式（subschema）</strong>，它描述了数据库的不同视图。</p><h3 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a><strong>数据库语言</strong></h3><p>数据库系统提供<strong>数据定义语言（Data-Definition Language，DDL）</strong>来定义数据库模式，并提供<strong>数据操作语言（Data-Manipulation Language，DML）</strong>来表达数据库的查询和更新。</p><p><strong>数据定义语言</strong></p><p>数据库模式是通过一系列定义来说明的，这些定义由一种称作<strong>数据定义语言</strong>的特定语言来表达。DDL也可用于定义数据的其他特征。</p><p>通过一系列特定的DDL语句来说明数据库系统所采用的存储结构和访问方式，这种特定的DDL称作数据存储和定义（data storage and definition）语言。这些语句定义了数据库模式的实现细节。</p><p>存储在数据库中的数据值必须满足某些<strong>一致性约束</strong>：</p><ul><li><strong>域约束（domain constraint）：</strong>每个属性都必须对应于一个所有肯恶搞的取值构成的域（如，整数型、字符型、日期&#x2F;时间型）</li><li><strong>引用完整性（referential integrity）：</strong>希望能确保一个关系中给定属性集上的取值也在零一关系的某一属性集的取值中出现。</li><li><strong>授权（authorization）</strong>：对于不同的用户在数据库中的不同数据值上允许不同的访问类型。这些区别以<strong>授权</strong>来表达。常见的是：<strong>读权限（read authorization）</strong>，允许读取数据，但不能修改数据；<strong>插入权限（insert authorization），</strong>允许插入新数据，但不允许修改已有数据；更新权限<strong>（update authorization）</strong>，允许删除数据。我们可以赋予用户所有或部分这些权限，也可以不赋予用户任何这些权限。</li></ul><p>DDL的输出放在<strong>数据字典（data dictionary）</strong>中，数据字典包含元数据（metadata），元数据是关于数据的数据。</p><p><strong>数据操纵语言</strong>是这样一种语言，它使得用户可以访问或操纵那些按照某种适当的数据模型组织起来的数据。有以下访问类型：</p><ul><li>对存储在数据库中的信息进行检索</li><li>向数据库中插入新的信息</li><li>修改数据库中存储的信息</li></ul><p>基本上由两种类型的数据操纵语言：</p><ul><li><strong>过程化的DML（procedural DML）</strong>要求用户指定需要什么数据以及如何获得这些数据</li><li><strong>声明式的DML（declarative DML）（也称为非过程的DML）</strong>只要求用户指定需要什么数据，而不必指明如何获得这些数据。</li></ul><p><strong>查询（query）</strong>是要求对信息进行检索的语句。DML中涉及信息检索的部分称作<strong>查询语言（query language）</strong></p><h3 id="从应用程序访问数据库"><a href="#从应用程序访问数据库" class="headerlink" title="从应用程序访问数据库"></a>从应用程序访问数据库</h3><p><strong>应用程序（application program）</strong>就是用来以这种方式与数据库进行交互的程序。</p><p>为了访问数据库，需要将DML语句从宿主发送到执行这些语句的数据库。最通用的办法是使用应用程序接口（过程集合），它可以用来将DML和DDL的语句发送给数据库，再取回结果。开放数据库连接（ODBC）标准定义用于C语言和其他几种语言的应用程序接口，Java数据库连接（JDBC）标准为Java语言提供了相应的接口。</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p><strong>概念设计（conceptual-design）</strong>设计者选择一个数据模型，并运用该选定的数据模型的概念，将那些需求转换成一个数据库的概念模式。</p><p><strong>规范化（normalization）</strong>它将所有属性集作为输入，生成一组关系表。</p><p>在<strong>功能需求说明（specification of functional requirement）</strong>中，用户秒火速将在数据之上执行的各种操作（或事务）。</p><p>在<strong>逻辑设计阶段（logical-desgin phrase）</strong>，设计人员将高层的概念模式映射到要使用过的实现数据库系统的数据模型上。……设计人员将得到的特定于系统的数据库模式用到后续的<strong>物理设计阶段（physical-design phrase）</strong>中，在这个阶段说明数据库的物理特性，这些特性包括文件组织的形式以及内部的存储结构。</p><h3 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a>数据库引擎</h3><p>数据系用的功能部件大致可分为存储管理器、<strong>查询处理器（query processor）</strong>部件和事物管理部件。</p><p>一个<strong>GB（gigabyte）</strong>大约为10亿字节，或1024个<strong>MB（megabyte）兆</strong>字节，而一个<strong>TB（terabyte）</strong>大约为1万亿字节，或<strong>1024个MB</strong>。最大的企业的数据库规模达到数个<strong>PB（petabyte）</strong>千万亿字节，或<strong>1024个TB。</strong></p><p><strong>存储管理器（storage manager）</strong>是数据库系统中负责在数据库中存储的低层数据与应用程序以及向系统提交的查询之间提供接口的部件。原始数据通过操作系统提供的文件系统存储在<strong>磁盘</strong>上。存储管理器将各种DML语句翻译为底层文件系统命令。因此，存储管理器负责数据库中数据的<strong>存储、检索和更新</strong></p><p><strong>存储管理器部件</strong>包括</p><ul><li><strong>权限及完整性管理器（authorization and integrity manager）</strong>，它检测是否满足完整性约束，并检查试图访问数据的用户的权限。</li><li><strong>事物管理器（transaction manager）</strong>它保证即使系统发生故障，数据库也保持在一致的状态，并保证并发事务的执行不发生冲突。</li><li><strong>文件管理器（file manager），</strong>它管理磁盘存储空间的分配，管理用于表示磁盘上所存储信息的数据结构。</li><li><strong>缓冲区管理器（buffer manager）</strong>，它负责将数据从磁盘上取到内存中，并决定哪些数据应被缓冲存储在内存中。</li><li><strong>数据文件（data file）</strong>它存储数据库自身。</li><li><strong>数据字典（data fictionary）</strong>它存储关于数据库结构的元数据，特别数据库模式。</li><li><strong>索引（index）</strong>它提供对数据项的快速访问。提供了指向包含特定值的数据项的指针。</li></ul><p><strong>查询处理器</strong></p><p>查询处理器组件包括：</p><ul><li><strong>DDL解释器（DDL interpreter）</strong>它解释DDL语句并将这些定义记录在数据字典中</li><li><strong>DML解释器（DML interpreter）</strong>它将查询语言中的DML语句翻译为包括一些列查询执行引擎能理解的低级指令的执行方案。DML编译器还进行<strong>查询优化（query optimization）</strong>，就是从几个候选执行计划中选出代价最小的那个。</li><li><strong>查询执行引擎（query evaluation engine）</strong>它执行由DML编译器产生的低级指令。</li></ul><h3 id="事物管理"><a href="#事物管理" class="headerlink" title="事物管理"></a><strong>事物管理</strong></h3><p>这种要么都发生要么都不发生的要求称作<strong>原子性。</strong>除此以外，资金转账的执行还必须保持数据库的一直行。例如：A和B的余额之和应该是保持不变的。这种正确性要求称作<strong>一致性</strong>。最后，当资金转账成功结束后，即使发生系统故障，账户A和B的余额也应该保持转账成功结束的新值。这种保持的要求称作<strong>持久性</strong>。</p><p><strong>事物（transaction）</strong>是数据库应用中完成单一逻辑功能的操作集合。每一个事物是一个既具有原子性又具有一致性的单元。</p><p>原子性和持久性的保证是数据库系统自身的职责，确切的说，是<strong>恢复管理器（recovery manager）</strong>的职责。</p><p><strong>故障恢复（failure recovery）</strong>：即它必须检测系统故障并将数据恢复到故障发生以前的状态。</p><p><strong>并发控制管理器（concurrency-control manager）</strong>控制并发事物间的相互影响，保证数据库的一致性。<strong>事物管理器（transaction manager）</strong>包括并发控制管理和恢复管理器。</p><h3 id="数据库和应用体系结构"><a href="#数据库和应用体系结构" class="headerlink" title="数据库和应用体系结构"></a>数据库和应用体系结构</h3><p>较早一代的数据库应用系统采用两层体系结构（two-tier architeture），其中应用程序驻留在客户机上，通过查询语言来调用服务器上的数据库系统功能。</p><p>而当今的数据库应用系统采用三层体系结构</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库系统概念&quot;&gt;&lt;a href=&quot;#数据库系统概念&quot; class=&quot;headerlink&quot; title=&quot;数据库系统概念&quot;&gt;&lt;/a&gt;数据库系统概念&lt;/h1&gt;&lt;h2 id=&quot;数据库基础概念&quot;&gt;&lt;a href=&quot;#数据库基础概念&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="http://example.com/2024/09/24/part1/"/>
    <id>http://example.com/2024/09/24/part1/</id>
    <published>2024-09-24T02:30:41.398Z</published>
    <updated>2024-09-24T02:30:41.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是一篇测试文章"><a href="#这是一篇测试文章" class="headerlink" title="这是一篇测试文章"></a>这是一篇测试文章</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;这是一篇测试文章&quot;&gt;&lt;a href=&quot;#这是一篇测试文章&quot; class=&quot;headerlink&quot; title=&quot;这是一篇测试文章&quot;&gt;&lt;/a&gt;这是一篇测试文章&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客维护</title>
    <link href="http://example.com/2024/09/24/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/"/>
    <id>http://example.com/2024/09/24/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/</id>
    <published>2024-09-24T02:25:35.298Z</published>
    <updated>2024-09-27T06:48:11.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客维护"><a href="#博客维护" class="headerlink" title="博客维护"></a>博客维护</h1><p><a href="https://www.cnblogs.com/yzhihao/p/6964208.html"><strong>Hexo 搭建博客 本地运行 常见报错及解决办法</strong></a></p><p>作为一名在hexo方面的新手，我在使用hexo编辑文档时遇到了很多问题，<code>hexo generate</code>编译的时候遇到了各种错误。</p><p>在此将这些错误及其解决方案记录下来，以便日后查证之用，同时，也可给各位在遇到类似问题时提供一点参考。</p><p><code>1</code>.<strong>执行命令hexo server，提示：Usage: hexo …. 提示找不到该指令</strong></p><p>解决方法，在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：npm install hexo-server –save 安装此server后再试，问题解决。</p><p><code>2</code>.<strong>执行：hexo server，启动了服务，在浏览器输入本地地址访问，看到白板和Cannot GET &#x2F; 几个字</strong></p><p><strong>方法一 有时无效</strong></p><p>原因是由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-ejs--save</span><br><span class="line"></span><br><span class="line">npm install hexo-renderer-stylus--save</span><br><span class="line"></span><br><span class="line">npm install hexo-renderer-marked--save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二 亲测有效</strong></p><p>创建一个空文件夹，</p><p>依次执行如下命令就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">hexo init projectName(你的项目文件名）</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> 项目到空文件夹下（一定要先hexo init 再 git <span class="built_in">clone</span> 项目）</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> projectName</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><strong>3.localhost:4000 端口被占用，可执行 hexo s -p 5000 修改成5000 端口</strong></p><p><strong>4.YAMLException: end of the stream or a document separator is expected at line x, column y:</strong></p><h3 id="错误说明"><a href="#错误说明" class="headerlink" title="错误说明"></a><strong>错误说明</strong></h3><p>缺少分隔符，一般都是因为缺少空格</p><p><strong>解决方案</strong></p><p>（1）出现这种情况，一般都是缺少空格，在<code>:</code>冒号之后要有空格！检查x行y列附近的冒号，其之后是否跟了空格。</p><p>（2）仔细检查<code>_config.yml</code>文件中所有冒号后面的空格，格式很严格，必须是只有一个，半角。不管是多了还是少了都会报错，这是yml解释器所定义的语法。如果不确定的话，将输入法调整到英文模式，删除所有冒号后面的空格重新输入，不要使用Tab。</p><p><strong>5.ValidationError: ‘null’ is not a string!</strong></p><h3 id="错误说明-1"><a href="#错误说明-1" class="headerlink" title="错误说明"></a><strong>错误说明</strong></h3><p>一般都是因为文章无内容，可能是因为在这篇博客文章中，有某些属性没有填写，比如author属性，tag属性，categories属性等，导致该属性是空的，即<code>null</code>，所以报错。</p><p>友情提示：如果你是用MarkdownPad 2来进行博文写作，可能在打开该md文件之后，对文件名进行了修改，导致出现了两篇文章。就会出现错误。</p><p> <strong>解决方案</strong></p><p>既然是属性缺失，那就把为空的那个属性给补上吧，仔细找找</p><p><strong>6.执行hexo g命令后，报错：<code>incomplete explicit mapping pair; a key node is missed</code></strong></p><p><strong>解决方案：</strong></p><p>主题目录下所有yml文件中所有有空格的字段都用双引号括起来，尤其注意languages下面的yml文件。</p><p>上传markdown文件至博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">清理项目缓存</span><br><span class="line">hexo clean</span><br><span class="line">重新生成博客</span><br><span class="line">hexo g</span><br><span class="line">将文件中的markdown文件转化为静态网页html文件</span><br><span class="line">hexo s</span><br><span class="line">部署到云端（github）</span><br><span class="line">hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多端开发"><a href="#多端开发" class="headerlink" title="多端开发"></a>多端开发</h2><p><a href="https://github.com/naosense/naosense.github.io/discussions/9">一套全平台多端发布hexo博文的方法 · naosense naosense.github.io · Discussion #9</a></p><p><a href="https://cloud.tencent.com/developer/article/1365689">如何多端同步 Hexo 框架博客-腾讯云开发者社区-腾讯云</a></p><p><a href="https://blog.csdn.net/ch206265/article/details/103239545#:~:text=%E9%A6%96%E5%85%88%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93Hexo%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%92%8C%E5%9C%A8GitHub%E4%B8%8A%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%AF%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%9C%E8%A5%BF%E3%80%82%20%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%BB%E8%A6%81%E6%98%AF%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E5%8C%85%E6%8B%AC%E4%BA%86%E8%87%AA%E5%B7%B1%E5%86%99%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E7%AB%A0%E7%9A%84MarkDown%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E7%AD%89%E7%AD%89%EF%BC%9B%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%AF%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E6%B8%B2%E6%9F%93%E8%BF%87%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E6%9C%80%E7%BB%88%E8%AE%BF%E9%97%AEGitHubName.github.io%E7%9C%8B%E5%88%B0%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E8%BF%99%E4%BA%9B%E4%BF%9D%E5%AD%98%E5%9C%A8GitHub%E4%B8%AD%E6%B8%B2%E6%9F%93%E8%BF%87%E7%9A%84%E4%B8%9C%E8%A5%BF%E3%80%82,%E6%83%B3%E8%A6%81%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5%EF%BC%8C%E5%85%B3%E9%94%AE%E7%82%B9%E6%98%AF%E8%AE%A9%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%83%BD%E6%9C%89%E6%9C%80%E6%96%B0%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E9%82%A3%E4%B8%AA%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8git%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%80%E9%9C%80%E6%B1%82%E3%80%82%20%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B%E6%98%AF%EF%BC%9A%20%E5%88%B0GitHubName.github.io%E8%BF%99%E4%B8%AA%E4%BB%93%E5%BA%93%EF%BC%8C%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E5%91%BD%E5%90%8D%E4%B8%BAhexo%EF%BC%88%E8%BF%99%E4%B8%AA%E6%96%B0%E5%BB%BA%E7%9A%84branch%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E5%AD%98%E5%82%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%EF%BC%89%EF%BC%8C%E5%B9%B6%E5%B0%86%E6%96%B0%E5%BB%BA%E7%9A%84hexo%E5%88%86%E6%94%AF%E8%AE%BE%E7%BD%AE%E4%B8%BAdefault%E5%88%86%E6%94%AF%EF%BC%9B">利用GitHub实现Hexo博客的多端同步_hexo github 第二台电脑-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/0b1fccce74e0"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客维护&quot;&gt;&lt;a href=&quot;#博客维护&quot; class=&quot;headerlink&quot; title=&quot;博客维护&quot;&gt;&lt;/a&gt;博客维护&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yzhihao/p/6964208.html&quot;&gt;&lt;stro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学生手册</title>
    <link href="http://example.com/2024/09/24/%E9%BA%BB%E7%9C%81%E7%90%86%E5%B7%A5%E5%AD%A6%E9%99%A2%E7%9A%84%E5%AD%A6%E6%9C%AF%E8%AF%9A%E4%BF%A1-%E5%AD%A6%E7%94%9F%E6%89%8B%E5%86%8C/"/>
    <id>http://example.com/2024/09/24/%E9%BA%BB%E7%9C%81%E7%90%86%E5%B7%A5%E5%AD%A6%E9%99%A2%E7%9A%84%E5%AD%A6%E6%9C%AF%E8%AF%9A%E4%BF%A1-%E5%AD%A6%E7%94%9F%E6%89%8B%E5%86%8C/</id>
    <published>2024-09-23T19:29:56.000Z</published>
    <updated>2024-09-27T06:59:35.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="麻省理工学院的学术诚信-学生手册"><a href="#麻省理工学院的学术诚信-学生手册" class="headerlink" title="麻省理工学院的学术诚信-学生手册"></a>麻省理工学院的学术诚信-学生手册</h1><h2 id="麻省理工学院的学术诚信"><a href="#麻省理工学院的学术诚信" class="headerlink" title="麻省理工学院的学术诚信"></a>麻省理工学院的学术诚信</h2><h2 id="引用你的来源"><a href="#引用你的来源" class="headerlink" title="引用你的来源"></a>引用你的来源</h2><h2 id="学术写作"><a href="#学术写作" class="headerlink" title="学术写作"></a>学术写作</h2><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h2 id="合作"><a href="#合作" class="headerlink" title="合作"></a>合作</h2><h2 id="欺骗"><a href="#欺骗" class="headerlink" title="欺骗"></a>欺骗</h2><h2 id="在压力下工作"><a href="#在压力下工作" class="headerlink" title="在压力下工作"></a>在压力下工作</h2><h2 id="帮助你成功"><a href="#帮助你成功" class="headerlink" title="帮助你成功"></a>帮助你成功</h2><h2 id="学术诚信手册"><a href="#学术诚信手册" class="headerlink" title="学术诚信手册"></a>学术诚信手册</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;麻省理工学院的学术诚信-学生手册&quot;&gt;&lt;a href=&quot;#麻省理工学院的学术诚信-学生手册&quot; class=&quot;headerlink&quot; title=&quot;麻省理工学院的学术诚信-学生手册&quot;&gt;&lt;/a&gt;麻省理工学院的学术诚信-学生手册&lt;/h1&gt;&lt;h2 id=&quot;麻省理工学院的学术</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://example.com/2024/09/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2024/09/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2024-09-06T19:14:37.000Z</published>
    <updated>2024-09-06T19:14:37.198Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/09/07/hello-world/"/>
    <id>http://example.com/2024/09/07/hello-world/</id>
    <published>2024-09-06T19:05:35.189Z</published>
    <updated>2024-09-06T19:05:35.189Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
